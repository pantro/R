data_1<-filtro_data_1
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
View(data_2)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta de las base de datos que vamos a utilizar en el codigo
setwd('/home/gianfranco/Documentos/github/Participation/match/match_planificacionAvanzada/bd')
#setwd('~/Participation/match/bd')
#Leer el archivos
data_1<-read.csv("BD_Planificacion_avanzada.xlsx - PLANIFICACION_AVANZADA.csv")
data_2<-read.csv("BD_Planificacion_avanzada2D.csv")
data_1<-read.csv("BD_Planificacion_avanzada.xlsx - PLANIFICACION_AVANZADA.csv")
data_2<-read.csv("BD_Planificacion_avanzada2D.csv")
sel<-c("UNICODE","P","D","L","V","CLUSTER","DIA_F1","MES_F1","ANIO_F1","Hora_.Inicio1","Hora_Final1","Resultado1", "DIA_F2", "MES_F2", "ANIO_F2","Hora_Inicio2", "Hora_Final2","Resultado2", "Fecha3", "DIA_F3", "MES_F3", "ANIO_F3","Hora_Inicio3", "Hora_Final3","Resultado3", "TipoRec","DIA_recor","Mes_recor","HoraRec","Dia_Prog", "Mes_Prog", "HoraProg", "Dia_RProg","Mes_RProg","HoraRP", "TipoRP", "HoraRP.1", "PARTICIPA")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Campos que contienen las horas
colHour<- c("Hora_.Inicio1","Hora_Final1","Hora_Inicio2", "Hora_Final2","Hora_Inicio3", "Hora_Final3","HoraRec","HoraProg","HoraRP","HoraRP.1")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
result_match <- data.frame()
data_total<- Match(data_1, data_2, result_match)
#Almacenando los datos que hicieron el MATCH perfectamente
result_match<-data_total$perfect
#Almacenando los datos problema
data_problem <- data_total$problem
View(data_problem)
rm(list = ls())
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta de las base de datos que vamos a utilizar en el codigo
setwd('/home/gianfranco/Documentos/github/Participation/match/match_planificacionAvanzada/bd')
#setwd('~/Participation/match/bd')
#Leer el archivos
data_1<-read.csv("BD_Planificacion_avanzada.xlsx - PLANIFICACION_AVANZADA.csv")
data_2<-read.csv("BD_Planificacion_avanzada2D.csv")
#Seleccionando campos importantes para análisis principal báciso
sel<-c("UNICODE","P","D","L","V","CLUSTER","DIA_F1","MES_F1","ANIO_F1","Hora_.Inicio1","Hora_Final1","Resultado1", "DIA_F2", "MES_F2", "ANIO_F2","Hora_Inicio2", "Hora_Final2","Resultado2", "Fecha3", "DIA_F3", "MES_F3", "ANIO_F3","Hora_Inicio3", "Hora_Final3","Resultado3", "TipoRec","DIA_recor","Mes_recor","HoraRec","Dia_Prog", "Mes_Prog", "HoraProg", "Dia_RProg","Mes_RProg","HoraRP", "TipoRP", "HoraRP.1", "PARTICIPA")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
#Filtrando para que no se esté buscando localidades que no estan en el estudio, suponiendo que no se han equivocado al ingresar la LOCALIDAD
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Uniformizando las columnas que tienen horas
#Campos que contienen las horas
colHour<- c("Hora_.Inicio1","Hora_Final1","Hora_Inicio2", "Hora_Final2","Hora_Inicio3", "Hora_Final3","HoraRec","HoraProg","HoraRP","HoraRP.1")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
#Creando la variable para almacenar todos los registros que hacen perfectamenete el match y van a hacer nuestros registros perfectos al final de todo el procedimiento
result_match <- data.frame()
#LLamando a la funcion Match
data_total<- Match(data_1, data_2, result_match)
#Almacenando los datos que hicieron el MATCH perfectamente
result_match<-data_total$perfect
#Almacenando los datos problema
data_problem <- data_total$problem
rm(list = ls())
####################################################################################################
#
# Autor: Gian Franco
# Fecha: 15/12/2015
#
# MATCH PLANIFICACION AVANZADA: Match realizado de la primera y segunda digitación de PLANIFICACION AVANZADA.
#
####################################################################################################
#Llamando a las funciones necesarias para hacer el MATCH
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta de las base de datos que vamos a utilizar en el codigo
setwd('/home/gianfranco/Documentos/github/Participation/match/match_planificacionAvanzada/bd')
#setwd('~/Participation/match/bd')
#Leer el archivos
data_1<-read.csv("BD_Planificacion_avanzada.xlsx - PLANIFICACION_AVANZADA.csv")
data_2<-read.csv("BD_Planificacion_avanzada2D.csv")
#Seleccionando campos importantes para análisis principal báciso
sel<-c("UNICODE","P","D","L","V","CLUSTER","DIA_F1","MES_F1","ANIO_F1","Hora_.Inicio1","Hora_Final1","Resultado1", "DIA_F2", "MES_F2", "ANIO_F2","Hora_Inicio2", "Hora_Final2","Resultado2", "Fecha3", "DIA_F3", "MES_F3", "ANIO_F3","Hora_Inicio3", "Hora_Final3","Resultado3", "TipoRec","DIA_recor","Mes_recor","HoraRec","Dia_Prog", "Mes_Prog", "HoraProg", "Dia_RProg","Mes_RProg","HoraRP", "TipoRP", "HoraRP.1", "PARTICIPA")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
#Filtrando para que no se esté buscando localidades que no estan en el estudio, suponiendo que no se han equivocado al ingresar la LOCALIDAD
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Uniformizando las columnas que tienen horas
#Campos que contienen las horas
colHour<- c("Hora_.Inicio1","Hora_Final1","Hora_Inicio2", "Hora_Final2","Hora_Inicio3", "Hora_Final3","HoraRec","HoraProg","HoraRP","HoraRP.1")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
#Creando la variable para almacenar todos los registros que hacen perfectamenete el match y van a hacer nuestros registros perfectos al final de todo el procedimiento
result_match <- data.frame()
data_total<- Match(data_1, data_2, result_match)
View(data_2)
View(data_1)
View(data_2)
View(data_1)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta de las base de datos que vamos a utilizar en el codigo
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis/bd')
#setwd('~/Participation/match/bd')
#Leer el archivos
data_1<-read.csv("Cuantis_participacion - BD.csv")
data_2<-read.csv("Cuantis_participacion_2da_dig - 2DA. DIG..csv")
sel<-c("UNICODE","P","D","L","V","DIA_FR","MES_FR","ANIO_FR","T","C","R","DES","LV","LP","HORA_INI","HORA_FIN")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
#Filtrando para que no se esté buscando localidades que no estan en el estudio
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
filtro_data_2<-filtro(data_2,dentro)
rm(list = ls())
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta donde se encuentran los archivos para la FASE 2
setwd('/home/gianfranco/comprobar datos del match/oswaldo paty edwin')
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 78.csv")
f2_cuantis<-read.csv("localidad 78.csv")
View(f2_cuantis)
f2_cuantis<-read.csv("localidad 78.csv")
View(f2_cuantis)
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
View(datos_problem)
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
write.csv(f2_duplicados, "revisar_oswaldopaty.csv")
rm(list = ls())
setwd('/home/gianfranco/comprobar datos del match/paul')
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34(2).csv")
f2_cuantis<-read.csv("localidad 34(2).csv")
f2_cuantis<-read.csv("localidad 34 (2).csv")
setwd('/home/gianfranco/comprobar datos del match/paul')
f2_cuantis<-read.csv("localidad 34 (2).csv")
result_match <- data.frame()
View(f2_cuantis)
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
x<- data_problem_corrected[is.na(data_problem_corrected$DIG_1) & is.na(data_problem_corrected$DIG_2),]
View(x)
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
f2_cuantis<-read.csv("localidad 34 (2).csv")
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
View(datos_problem)
rm(list = ls())
setwd('/home/gianfranco/comprobar datos del match/paul')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34 (2).csv")
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
#Eliminar las columnas DIG_1, DIG_2 y el campo de ERRORES_DOCUMENTADOS, para que al momento de hacer el MATCH denuevo no nos generen errores
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
colHour<- c("HORA_PROG")
#Utilizamos la funcion UNIF_HOUR
f2_DIG1 <- UnifHour(f2_DIG1, colHour)
f2_DIG2 <- UnifHour(f2_DIG2, colHour)
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
colHour<- c("HORA_PROG")
#Utilizamos la funcion UNIF_HOUR
f2_DIG1 <- UnifHour(f2_DIG1, colHour)
f2_DIG2 <- UnifHour(f2_DIG2, colHour)
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
View(datos_problem)
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
write.csv(f2_duplicados, "revisar_paul.csv")
rm(list = ls())
setwd('/home/gianfranco/comprobar datos del match/jorge')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 7,8,13,14.csv")
View(f2_cuantis)
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
rm(lis)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
setwd('/home/gianfranco/comprobar datos del match/jorge')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 7,8,13,14.csv")
#Utilizando la funcion MATCH FASE 2
#Separar los que fueron realizados en la primera digitación de los que fueron realizados en la segunda digitación
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
#Eliminar las columnas DIG_1, DIG_2 y el campo de ERRORES_DOCUMENTADOS, para que al momento de hacer el MATCH denuevo no nos generen errores
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
View(f2_DIG1)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta donde se encuentran los archivos para la FASE 2
setwd('/home/gianfranco/comprobar datos del match/jorge')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 7,8,13,14.csv")
View(f2_cuantis)
f2_cuantis <- f2_cuantis[,-1]
View(f2_cuantis)
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
#Eliminar las columnas DIG_1, DIG_2 y el campo de ERRORES_DOCUMENTADOS, para que al momento de hacer el MATCH denuevo no nos generen errores
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
View(datos_problem)
colHour<- c("HORA_PROG")
#Utilizamos la funcion UNIF_HOUR
f2_DIG1 <- UnifHour(f2_DIG1, colHour)
f2_DIG2 <- UnifHour(f2_DIG2, colHour)
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
View(datos_problem)
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
setwd('/home/gianfranco/comprobar datos del match/jorge')
write.csv(f2_duplicados, "revisar_jorge.csv")
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta donde se encuentran los archivos para la FASE 2
setwd('/home/gianfranco/comprobar datos del match/jorge')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 7,8,13,14.csv")
View(f2_cuantis)
f2_cuantis <- f2_cuantis[,-1]
View(f2_cuantis)
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
View(datos_problem)
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
write.csv(f2_duplicados, "revisar_jorge.csv")
rm(list = ls())
setwd('/home/gianfranco/comprobar datos del match/jorge/se dividio en grupos')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 8.csv")
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
setwd('/home/gianfranco/comprobar datos del match/jorge/se dividio en grupos')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("LOCALIDAD_8.csv")
View(f2_cuantis)
f2_cuantis <- f2_cuantis[,-1]
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
#Ubicarmos solo a los unicode DUPLICADOS
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
setwd('/home/gianfranco/comprobar datos del match/jorge/se dividio en grupos')
write.csv(f2_duplicados, "revisar_liz.csv")
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
#Ruta donde se encuentran los archivos para la FASE 2
setwd('/home/gianfranco/comprobar datos del match/maria')
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34(1).csv")
View(f2_cuantis)
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
x <- data_problem_corrected[is.na(data_problem_corrected$DIG_2) &is.na(data_problem_corrected$DIG_1)]
data_problem_corrected <- f2_cuantis
x <- data_problem_corrected[is.na(data_problem_corrected$DIG_2) & is.na(data_problem_corrected$DIG_1),]
View(x)
setwd('/home/gianfranco/comprobar datos del match/maria')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34(1).csv")
#f2_cuantis <- f2_cuantis[,-1]
#Utilizando la funcion MATCH FASE 2
#Separar los que fueron realizados en la primera digitación de los que fueron realizados en la segunda digitación
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
View(f2_DIG1)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
setwd('/home/gianfranco/comprobar datos del match/maria')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34(1).csv")
View(f2_cuantis)
f2_cuantis <- f2_cuantis[,-20]
View(f2_cuantis)
f2_cuantis <- f2_cuantis[,-19]
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34(1).csv")
f2_cuantis <- f2_cuantis[,-20]
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
#Eliminar las columnas DIG_1, DIG_2 y el campo de ERRORES_DOCUMENTADOS, para que al momento de hacer el MATCH denuevo no nos generen errores
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
View(datos_problem)
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
setwd('/home/gianfranco/comprobar datos del match/maria')
write.csv(f2_duplicados, "revisar_maria.csv")
rm(list = ls())
setwd('/home/gianfranco/comprobar datos del match/maria')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34 maria.csv")
setwd('/home/gianfranco/comprobar datos del match/maria')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34 maria.csv")
setwd('/home/gianfranco/comprobar datos del match/maria')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34 maria.csv")
setwd('/home/gianfranco/comprobar datos del match/maria')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 34 maria.csv")
rm(list = ls())
setwd('/home/gianfranco/comprobar datos del match/edwin liz')
#Leer el archivos
#Los datos corregidos deben tener un campo "ERRORES_DOCUMENTADOS" donde se explica el error que se encontro
result_match <- data.frame()
f2_cuantis<-read.csv("localidad 7,13y14.csv")
View(f2_cuantis)
setwd('/home/gianfranco/Documentos/github/Participation/match')
source("FunctionMatch.R")
data_problem_corrected <- f2_cuantis
f2_DIG1 <- data_problem_corrected[is.na(data_problem_corrected$DIG_2),]
f2_DIG2 <- data_problem_corrected[is.na(data_problem_corrected$DIG_1),]
n_col <- length(data_problem_corrected)
f2_DIG1 <- f2_DIG1[,-c(n_col-2,n_col-1,n_col)]
f2_DIG2 <- f2_DIG2[,-c(n_col-2,n_col-1,n_col)]
f2_match <- Match(f2_DIG1, f2_DIG2, result_match)
#Almacenando los datos que hicieron perfectamente el MATCH en la FASE 2, que aumenta columnas a la variable que ingresamos "result"
f2_match_perfect <- f2_match$perfect
#Almacenando los datos que son problema al realizar MATCH FASE 2, estos son datos que estan en una digitacion y no estan enla otra
#y tambien los errores que se pudieron cometer al momento de corregir los registros.
datos_problem<- f2_match$problem
aux <- datos_problem[which(duplicated(datos_problem$UNICODE)),1]
f2_duplicados<-datos_problem[datos_problem$UNICODE %in% aux,]
View(f2_duplicados)
