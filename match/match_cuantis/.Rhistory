setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
View(f2_cuantis)
View(f2_cuantis_DIG1)
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18)]
View(f2_cuantis_DIG1)
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
View(f2_cuantis)
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
View(f2_cuantis)
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
View(f2_duplicados)
rm(list = ls())
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
#Leer el archivos
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
#
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
#
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18)]
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
View(f2_cuantis)
View(f2_duplicados)
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
#Leer el archivos
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
#
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
#
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18)]
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
write.csv(f2_duplicados, "f2_errores_duplicados.csv")
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/bd')
data_1<-read.csv("Cuantis_participacion - BD.csv")
data_2<-read.csv("Cuantis_participacion_2da_dig - 2DA. DIG..csv")
sel<-c("UNICODE","P","D","L","V","DIA_FR","MES_FR","ANIO_FR","T","C","R","DES","LV","LP","HORA_INI","HORA_FIN")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Uniformizando las columnas que tienen horas
#Campos que contienen las horas
colHour<- c("HORA_INI","HORA_FIN")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
#Cambiando los NA a "0" para un mejor análisis
#Almacenando los nombres de las columnas que vamos a querer que sus NAs cambien a "0"
namesCol<-c("T","C","R","DES","LV","LP")
#Utilizando la funcion ChanceNAxCero
data_1 <- ChanceNAxCero(data_1, namesCol)
data_2 <- ChanceNAxCero(data_2, namesCol)
#LLamando a la funcion Match
data_problem<- Match(data_1, data_2)
View(data_problem)
data_problem <- data_problem[order(data_problem$UNICODE),]
View(data_problem)
data_problem<- Match(data_1, data_2)
data_problem <- data_problem[order(data_problem$MES_FR & data_problem$DIA_FR & data_problem$V & data_problem$L),]
data_problem <- data_problem[order(data_problem$MES_FR, data_problem$DIA_FR, data_problem$V, data_problem$L),]
View(data_problem)
data_problem <- data_problem[order(data_problem$L),]
View(data_problem)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/bd')
data_1<-read.csv("Cuantis_participacion - BD.csv")
data_2<-read.csv("Cuantis_participacion_2da_dig - 2DA. DIG..csv")
sel<-c("UNICODE","P","D","L","V","DIA_FR","MES_FR","ANIO_FR","T","C","R","DES","LV","LP","HORA_INI","HORA_FIN")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
colHour<- c("HORA_INI","HORA_FIN")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
namesCol<-c("T","C","R","DES","LV","LP")
#Utilizando la funcion ChanceNAxCero
data_1 <- ChanceNAxCero(data_1, namesCol)
data_2 <- ChanceNAxCero(data_2, namesCol)
library(compare)
x <- compare(c(1,2,3), c(1,4,5))
data_problem<- Match(data_1, data_2)
rm(list = ls())
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
View(f2_cuantis_DIG1)
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18)]
View(f2_cuantis_DIG1)
View(f2_cuantis_DIG2)
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
View(f2_cuantis)
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
View(f2_duplicados)
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
#Separar los que fueron realizados en la primera digitación de los que fueron realizados en la segunda digitación
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
#Eliminar las columnas DIG_1 y DIG_2
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18,19)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18,19)]
#Volver a utilizar la FUNCION MATCH
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
#Ordenar por UNICODE
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
#Ubicar solo a los unicode DUPLICADOS
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
View(f2_cuantis)
View(f2_duplicados)
View(f2_cuantis)
View(f2_duplicados)
View(f2_cuantis)
rm(list = ls())
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18,19)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18,19)]
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
View(f2_duplicados)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18,19)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18,19)]
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
View(f2_duplicados)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
#Eliminar las columnas DIG_1 y DIG_2
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18,19)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18,19)]
#Volver a utilizar la FUNCION MATCH
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2)
#Ordenar por UNICODE
f2_cuantis <- f2_cuantis[order(f2_cuantis$UNICODE),]
#Ubicar solo a los unicode DUPLICADOS
aux <- f2_cuantis[which(duplicated(f2_cuantis$UNICODE)),1]
f2_duplicados<-f2_cuantis[f2_cuantis$UNICODE %in% aux,]
View(f2_duplicados)
View(f2_cuantis)
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match/bd')
data_1<-read.csv("Cuantis_participacion - BD.csv")
data_2<-read.csv("Cuantis_participacion_2da_dig - 2DA. DIG..csv")
sel<-c("UNICODE","P","D","L","V","DIA_FR","MES_FR","ANIO_FR","T","C","R","DES","LV","LP","HORA_INI","HORA_FIN")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
#Filtrando para que no se esté buscando localidades que no estan en el estudio
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Uniformizando las columnas que tienen horas
#Campos que contienen las horas
colHour<- c("HORA_INI","HORA_FIN")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
#Cambiando los NA a "0" para un mejor análisis
#Almacenando los nombres de las columnas que vamos a querer que sus NAs cambien a "0"
namesCol<-c("T","C","R","DES","LV","LP")
#Utilizando la funcion ChanceNAxCero
data_1 <- ChanceNAxCero(data_1, namesCol)
data_2 <- ChanceNAxCero(data_2, namesCol)
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
#Ruta de las base de datos que vamos a utilizar en el codigo
setwd('/home/gianfranco/Documentos/github/Participation/match/bd')
#setwd('~/Participation/match/bd')
#Leer el archivos
data_1<-read.csv("Cuantis_participacion - BD.csv")
data_2<-read.csv("Cuantis_participacion_2da_dig - 2DA. DIG..csv")
#Seleccionando campos importantes para análisis principal báciso
sel<-c("UNICODE","P","D","L","V","DIA_FR","MES_FR","ANIO_FR","T","C","R","DES","LV","LP","HORA_INI","HORA_FIN")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
#Filtrando para que no se esté buscando localidades que no estan en el estudio
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Uniformizando las columnas que tienen horas
#Campos que contienen las horas
colHour<- c("HORA_INI","HORA_FIN")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
#Cambiando los NA a "0" para un mejor análisis
#Almacenando los nombres de las columnas que vamos a querer que sus NAs cambien a "0"
namesCol<-c("T","C","R","DES","LV","LP")
#Utilizando la funcion ChanceNAxCero
data_1 <- ChanceNAxCero(data_1, namesCol)
data_2 <- ChanceNAxCero(data_2, namesCol)
data_1<- unique(data_1)
data_2<- unique(data_2)
data_1$DIG_1<- unlist(1)
data_2$DIG_2<- unlist(1)
full_outer_join<- merge(data_1, data_2, all = TRUE)
x<- full_outer_join[1==full_outer_join$DIG_1 & 1==full_outer_join$DIG_2,]
x<- full_outer_join[,1==full_outer_join$DIG_1 & 1==full_outer_join$DIG_2]
x<- full_outer_join[(1==full_outer_join$DIG_1 & 1==full_outer_join$DIG_2),]
View(full_outer_join)
x<- full_outer_join[!(is.na(full_outer_join$DIG_1) | is.na(full_outer_join$DIG_2)),]
y<- full_outer_join[is.na(full_outer_join$DIG_1) | is.na(full_outer_join$DIG_2),]
4995+1266
result <- data.frame()
prueba<- Match(data_1, data_2, result)
c(prueba, prueba2) <- Match(data_1, data_2, result)
prueba[1]<- Match(data_1, data_2, result)
prueba[2]<- Match(data_1, data_2, result)
prueba, prueba2 <- Match(data_1, data_2, result)
prueba,prueba2 <- Match(data_1, data_2, result)
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
prueba,prueba2 <- Match(data_1, data_2, result)
prueba<- Match(data_1, data_2, result)
rpta1<-prueba[1]
rpta2<-prueba[2]
rpta2
rpta1
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
prueba<- Match(data_1, data_2, result)
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
prueba<- Match(data_1, data_2, result)
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
prueba<- Match(data_1, data_2, result)
rpta1<-prueba$first
rpta2<-prueba$second
View(rpta2)
rm(list = ls())
#Ruta donde se encuentra el archivo "FunctionMatch.R"
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
#Ruta de las base de datos que vamos a utilizar en el codigo
setwd('/home/gianfranco/Documentos/github/Participation/match/bd')
#setwd('~/Participation/match/bd')
#Leer el archivos
data_1<-read.csv("Cuantis_participacion - BD.csv")
data_2<-read.csv("Cuantis_participacion_2da_dig - 2DA. DIG..csv")
#Seleccionando campos importantes para análisis principal báciso
sel<-c("UNICODE","P","D","L","V","DIA_FR","MES_FR","ANIO_FR","T","C","R","DES","LV","LP","HORA_INI","HORA_FIN")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
#Filtrando para que no se esté buscando localidades que no estan en el estudio
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Uniformizando las columnas que tienen horas
#Campos que contienen las horas
colHour<- c("HORA_INI","HORA_FIN")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
#Cambiando los NA a "0" para un mejor análisis
#Almacenando los nombres de las columnas que vamos a querer que sus NAs cambien a "0"
namesCol<-c("T","C","R","DES","LV","LP")
#Utilizando la funcion ChanceNAxCero
data_1 <- ChanceNAxCero(data_1, namesCol)
data_2 <- ChanceNAxCero(data_2, namesCol)
#Creando la variable para almacenar todos los registrso que hacen perfectamenete el match
result <- data.frame()
data<- Match(data_1, data_2, result)
data_problem <- data$first
result<-data$second
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
#Eliminar las columnas DIG_1 y DIG_2
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18,19)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18,19)]
data_1 <- f2_cuantis_DIG1
data_2 <- f2_cuantis_DIG2
data_1<- unique(data_1)
data_2<- unique(data_2)
data_1$DIG_1<- unlist(1)
data_2$DIG_2<- unlist(1)
full_outer_join<- merge(data_1, data_2, all = TRUE)
data_problem<- full_outer_join[is.na(full_outer_join$DIG_1) | is.na(full_outer_join$DIG_2),]
data_perfect <- full_outer_join[!(is.na(full_outer_join$DIG_1) | is.na(full_outer_join$DIG_2)),]
rm(list = ls())
setwd('/home/gianfranco/Documentos/github/Participation/match/codigo')
source("FunctionMatch.R")
#Ruta de las base de datos que vamos a utilizar en el codigo
setwd('/home/gianfranco/Documentos/github/Participation/match/bd')
#setwd('~/Participation/match/bd')
#Leer el archivos
data_1<-read.csv("Cuantis_participacion - BD.csv")
data_2<-read.csv("Cuantis_participacion_2da_dig - 2DA. DIG..csv")
#Seleccionando campos importantes para análisis principal báciso
sel<-c("UNICODE","P","D","L","V","DIA_FR","MES_FR","ANIO_FR","T","C","R","DES","LV","LP","HORA_INI","HORA_FIN")
data_1<-data_1[,sel]
data_2<-data_2[,sel]
#Filtrando para que no se esté buscando localidades que no estan en el estudio
filtro<-function(dat,dentro)
{
filtrado<-dat[is.element(dat$L,dentro)==TRUE,]
return(filtrado)
}
dentro<-c(7,8,13,14,22,23,25,26,27,29,34,36,39,42,44,45,71,77,78,81,82,83)
#data_1
filtro_data_1<-filtro(data_1,dentro)
data_1<-filtro_data_1
#data_2
filtro_data_2<-filtro(data_2,dentro)
data_2<-filtro_data_2
#Uniformizando las columnas que tienen horas
#Campos que contienen las horas
colHour<- c("HORA_INI","HORA_FIN")
#Utilizamos la funcion UNIF_HOUR
data_1 <- UnifHour(data_1, colHour)
data_2 <- UnifHour(data_2, colHour)
#Cambiando los NA a "0" para un mejor análisis
#Almacenando los nombres de las columnas que vamos a querer que sus NAs cambien a "0"
namesCol<-c("T","C","R","DES","LV","LP")
#Utilizando la funcion ChanceNAxCero
data_1 <- ChanceNAxCero(data_1, namesCol)
data_2 <- ChanceNAxCero(data_2, namesCol)
#Creando la variable para almacenar todos los registrso que hacen perfectamenete el match
result <- data.frame()
#LLamando a la funcion Match
data<- Match(data_1, data_2, result)
#Almacenando los datos que hicieron el MATCH perfectamente
result<-data$second
#Almacenando los datos problema
data_problem <- data$first
#Ruta donde se encuentran los archivos para la FASE 2
setwd('/home/gianfranco/Documentos/github/Participation/match/match_cuantis')
#Leer el archivos
f2_cuantis<-read.csv("datos_problema_match_cuantis_CORREGIDO.csv")
#Separar los que fueron realizados en la primera digitación de los que fueron realizados en la segunda digitación
f2_cuantis_DIG1 <- f2_cuantis[is.na(f2_cuantis$DIG_2),]
f2_cuantis_DIG2 <- f2_cuantis[is.na(f2_cuantis$DIG_1),]
#Eliminar las columnas DIG_1 y DIG_2
f2_cuantis_DIG1 <- f2_cuantis_DIG1[,-c(17,18,19)]
f2_cuantis_DIG2 <- f2_cuantis_DIG2[,-c(17,18,19)]
#Volver a utilizar la FUNCION MATCH
f2_cuantis <- Match(f2_cuantis_DIG1, f2_cuantis_DIG2, result)
x<- f2_cuantis$second
