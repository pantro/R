raza<-sample(c("caucasico","afroperuano","mestizo"),50,replace=T)
sexo<-rbinom(50,1,prob=0.5)#Femenino=1;Masculino=0
peso<-vector(mode="numeric",length=50)
bd<-data.frame(edad,raza,sexo,peso)
bd
bd$peso<-rnorm(50,mean=(3.5*edad)-bd$sexo,sd=5-bd$sexo/2)
bd$peso
bd
?hist
hist(peso)
hist(bd$peso)
hist(bd$peso, breaks=5,freq = F)
boxplot(bd$peso)
boxplot(bd$peso, horizontal = T)
boxplot(bd$peso, horizontal = T, type=5)
boxplot(bd$peso, horizontal = T, type=5)
plot(bd$edad, bd$peso)
bd$edad12[bd$edad<12]<-0
bd$edad12[bd$edad>=12]<-1
head(bd)
plot(bd$edad12, bd$peso)
table(bd$edad,bd$edad12)
plot(bd$edad12+rnorm(length(bd$edad12), mean = 0.1,
sd = 0.05),bd$peso)
cor(bd$edad, bd$peso)
cor(bd$peso, bd$edad)
plot(bd$edad, bd$peso)
scatter.smooth(bd$edad, bd$peso)
set.seed(1977)
edad<-runif(50,min=11,max=13)
raza<-sample(c("caucasico","afroperuano","mestizo"),50,replace=T)
sexo<-rbinom(50,1,prob=0.5)#Femenino=1;Masculino=0
peso<-vector(mode="numeric",length=50)
bd<-data.frame(edad,raza,sexo,peso)
bd$peso<-rnorm(50,mean=(3.5*edad)-bd$sexo,sd=5-bd$sexo/2)
hist(bd$peso, breaks=5,freq = F)
boxplot(bd$peso, horizontal = T)
plot(bd$edad, bd$peso)
bd$edad12[bd$edad<12]<-0
bd$edad12[bd$edad>=12]<-1
head(bd)
plot(bd$edad12, bd$peso)
table(bd$edad,bd$edad12)
plot(bd$edad12+rnorm(length(bd$edad12), mean = 0.1,
sd = 0.05),bd$peso)
scatter.smooth(bd$edad, bd$peso)
library(modeest)
mlv(bd$raza, methods = "mfv")
mlv(bd$raza, method = "mfv")
head(bd)
hist(bd$raza)
barplot(bd$raza)
barplot(table(bd$raza))
table(bd$raza)
boxplot(bd$edad ~ bd$sexo)
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)")
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo")
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"))
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"),
main="Relacion entre peso y sexo")
mtext("Escolares de 11 a 13 anhos - Arequipa")
mtext("Escolares de 11 a 13 anhos - Arequipa", cex=1.5)
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"),
main="Relacion entre peso y sexo")
mtext("Escolares de 11 a 13 anhos - Arequipa", cex=1.5)
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"),
main="Relacion entre peso y sexo")
mtext("Escolares de 11 a 13 anhos - Arequipa", cex=1.2)
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"),
main="Relacion entre peso y sexo")
mtext("Escolares de 11 a 13 anhos - Arequipa", cex=1)
par(las=1)
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"),
main="Relacion entre peso y sexo")
mtext("Escolares de 11 a 13 anhos - Arequipa", cex=1)
bd[1:3,]
bd[1:3,1]
bd[1:3, %in% c("peso","edad")]
bd[1:3, c("peso","edad")]
summary(bd$edad)
str(bd)
unique(bd$raza)
unique(bd$peso)
round(bd$peso, digits=1)
head(bd)
bd$pesoround <- round(bd$peso, digits=1)
head(bd)
bd$peso <- round(bd$peso, digits=2)
head(bd)
set.seed(1977)
edad<-runif(50,min=11,max=13)
raza<-sample(c("caucasico","afroperuano","mestizo"),50,replace=T)
sexo<-rbinom(50,1,prob=0.5)#Femenino=1;Masculino=0
peso<-vector(mode="numeric",length=50)
bd<-data.frame(edad,raza,sexo,peso)
bd$peso<-rnorm(50,mean=(3.5*edad)-bd$sexo,sd=5-bd$sexo/2)
hist(bd$peso, breaks=5,freq = F)
boxplot(bd$peso, horizontal = T)
plot(bd$edad, bd$peso)
bd$edad12[bd$edad<12]<-0
bd$edad12[bd$edad>=12]<-1
head(bd)
plot(bd$edad12, bd$peso)
table(bd$edad,bd$edad12)
plot(bd$edad12+rnorm(length(bd$edad12), mean = 0.1,
sd = 0.05),bd$peso)
scatter.smooth(bd$edad, bd$peso)
library(modeest)
mlv(bd$raza, method = "mfv")
hist(bd$raza)
barplot(table(bd$raza))
par(las=1)
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"),
main="Relacion entre peso y sexo")
mtext("Escolares de 11 a 13 anhos - Arequipa", cex=1)
bd[1:3, c("peso","edad")]
summary(bd$edad)
str(bd)
unique(bd$raza)
unique(bd$peso)
round(bd$peso, digits=1)
bd$peso <- round(bd$peso, digits=2)
set.seed(1977)
edad<-runif(50,min=11,max=13)
raza<-sample(c("caucasico","afroperuano","mestizo"),50,replace=T)
sexo<-rbinom(50,1,prob=0.5)#Femenino=1;Masculino=0
peso<-vector(mode="numeric",length=50)
bd<-data.frame(edad,raza,sexo,peso)
bd$peso<-rnorm(50,mean=(3.5*edad)-bd$sexo,sd=5-bd$sexo/2)
hist(bd$peso, breaks=5,freq = F)
boxplot(bd$peso, horizontal = T)
plot(bd$edad, bd$peso)
bd$edad12[bd$edad<12]<-0
bd$edad12[bd$edad>=12]<-1
head(bd)
plot(bd$edad12, bd$peso)
table(bd$edad,bd$edad12)
plot(bd$edad12+rnorm(length(bd$edad12), mean = 0.1,
sd = 0.05),bd$peso)
scatter.smooth(bd$edad, bd$peso)
library(modeest)
mlv(bd$raza, method = "mfv")
hist(bd$raza)
barplot(table(bd$raza))
par(las=1)
boxplot(bd$edad ~ bd$sexo,ylab="Peso (Kg.)", xlab="Sexo",
names=c("Hombres","Mujeres"),
main="Relacion entre peso y sexo")
mtext("Escolares de 11 a 13 anhos - Arequipa", cex=1)
bd[1:3, c("peso","edad")]
summary(bd$edad)
str(bd)
unique(bd$raza)
unique(bd$peso)
round(bd$peso, digits=1)
bd$peso <- round(bd$peso, digits=2)
head(bd)
tail(bd)
tabulate(bd$edad)
tabulate(bd$edad12)
pesoRicardo<- rnorm(12, 65, 2)
meses <- c(1:12)
meses
pesoRicardo
plot(meses, pesoRicardo)
plot(meses, pesoRicardo, type = "l")
plot(meses, pesoRicardo, type = "b")
plot(meses, pesoRicardo, type = "o")
plot(meses, pesoRicardo, type = "o", axes = R)
plot(meses, pesoRicardo, type = "o", axes = F)
plot(meses, pesoRicardo, type = "o", axes = F, xlab = "Meses",)
plot(meses, pesoRicardo, type = "o", axes = F, xlab = "Meses", ylab = "Peso (Kg.)")
axis(side = 1, at=c(1:12),
labels = c("E","F","M","A","M","J","J","A","S","O","N","D"))
axis(side = 2, at=c(62,64,66,68,70),
labels = c(62,64,66,68,70))
axis(side = 2, at=c(62,64,66,68,70),
labels = c(62,64,66,68,70))
Sys.time()
if(Sys.getenv("SPATIAL_DATA") != "") {
setwd(paste(Sys.getenv("SPATIAL_DATA"), sep=""))
} else if(Sys.getenv("USER") == "snutman") {
setwd("/Users/snutman/Documents/CHAGAS_DATA/spatial_surveillence/Spatial_data")
} else if(Sys.getenv("USER") == "USER") {
setwd("PATH_TO_SPATIAL_DATA")
}
TimeStamp <- function(prefix="", suffix="", outmsg=TRUE) {
#generates a unique time stamp for every data generated
t <- format(Sys.time(), "%Y-%m-%d__%H-%M-%S");
s <- as.integer(runif(1, max=1000))
filename <- paste(prefix, t, s, suffix, sep="")
if (outmsg) {
print(filename)
}
return(filename)
}
Params <- list(
output="yes"
)
files <- list.files(pattern="*blocks.csv")
for (i in 1:length(files)) {
#CLEAN UP NAMES
name=sub("blocks.csv", "", files[i])
name=sub("_puntos.*$","",name,ignore.case=TRUE)
name=sub("puntos.*$","",name,ignore.case=TRUE)
name=sub("_Point.*$","",name,ignore.case=TRUE)
name=sub("Point.*$","",name,ignore.case=TRUE)
name=sub("Point.*$","",name,ignore.case=TRUE)
name=sub("_2.*$","",name,ignore.case=TRUE)
inp_raw <- read.csv(file=files[i], header=TRUE)
inp_raw<-inp_raw[order(inp_raw$polygon, inp_raw$unicode),]
#FIND MISSING UNICODES | ULTIMATELY OUTPUT TO NEW DATASET
missing_unicode=which(inp_raw$unicode==""|is.na(inp_raw$unicode))
#SOCABAYA HAS CENTRO DE SALUD WITH SPECIAL UNICODE; DEALT WITH HERE
#BY MAKING UNICODE IN LINE WITH POLYGON WHICH IS CHANGED BACK AT THE END
if (grepl("socabaya",name,ignore.case=TRUE)) {
inp_raw$unicode<-sub("CS 4 de Octubre","1.25.3.324A",inp_raw$unicode,fixed=TRUE)
#print("CHANGED SOCABAYA")
}
inp<-concat.split(inp_raw,"unicode", ".")
setnames(inp, 7:10, c("prov", "dist", "loc", "viv"))
print(paste(name,"_Raw:", NROW(inp),sep=" "))
#FIND NEW LOCATIONS FROM AFTER EID DATA; MARKED WITH ALPHA CHARACTERS"
addl=which(grepl("[A-Z]",inp$loc,ignore.case=TRUE))
inp_add <- inp[addl,]
print(paste(name,"Add",":",NROW(inp_add),sep=" "))
#PREVIOUS LOCATION BLOCKS
short=which(grepl("[A-Z]",inp$loc,ignore.case=TRUE)==0)
inp_short <- inp[short,]
inp_short$loc <- factor(inp_short$loc)
inp_short <- as.data.frame(inp_short)
inp_short$loc_num <- as.numeric(levels(inp_short$loc))[inp_short$loc]
inp_short$uniblock <- inp_short$loc_num * 10000 + inp_short$polygon
block_by_loc <- aggregate(x = inp_short$polygon, by = list(inp_short$loc_num, inp_short$uniblock), FUN = mean)
#CREATE A UNIQUE SET OF BLOCKS BY LOCALITY
block_by_loc$block <- ave(block_by_loc$Group.2, block_by_loc$Group.1, FUN = seq_along)
setnames(block_by_loc, 2, "uniblock")
blocks <- block_by_loc[,c(2,4)]
inp_short <- merge(inp_short, blocks, by = "uniblock", all = T)
#CHANGING BACK SOCABAYA SPECIAL UNICODE
if (grepl("socabaya",name,ignore.case=TRUE)) {
cs=which(inp_short$unicode=="1.25.3.324A")
inp_short$unicode[cs]<-"CS 4 de Octubre"
inp_short$viv[cs]<-NA
}
# ADDITIONAL LOCALITIES IF THERE ARE ANY (DONE SEPARATELY BECAUSE THE LOCALITIES ARE NOT NUMBERS)
if (NROW(inp_add)>0) {
inp_add$uniblock <- paste(inp_add$loc, inp_add$polygon)
block_by_loc <- aggregate(x = inp_add$polygon, by = list(inp_add$loc, inp_add$uniblock), FUN = mean)
block_by_loc$block <- ave(block_by_loc$Group.2, block_by_loc$Group.1, FUN = seq_along)
setnames(block_by_loc, 2, "uniblock")
blocks <- block_by_loc[,c(2,4)]
inp_add$loc_num<-as.numeric(NA)
inp_add <- merge(inp_add, blocks, by = "uniblock", all = T)
#RE-COMBINE DATASETS
inp_all<-rbind(inp_short,inp_add)
#REMAKE UNIBLOCK TO REFELCT PROV,DISTRICT,LOCALITY AND EXPORT
inp_all$uniblock<-NULL
inp_all$uniblock<-as.factor(paste(inp_all$prov,inp_all$dist,inp_all$loc,inp_all$block,sep="."))
assign(name,inp_all,envir = .GlobalEnv)
if (Params$output!="no") {
write.csv(inp_all,paste("output/",name,"_uniblock.csv",sep=""),row.names=FALSE)
print(paste(name,"_Final:", NROW(inp_all),sep=" "))
}
}
else {
inp_short$uniblock<-NULL
inp_short$uniblock<-as.factor(paste(inp_short$prov,inp_short$dist,inp_short$loc,inp_short$block,sep="."))
assign(name,inp_short,envir = .GlobalEnv)
if (Params$output!="no") {
write.csv(inp_short,paste("output/",name,"_uniblock.csv",sep=""),row.names=FALSE)
print(paste(name,"_Final:", NROW(inp_short),sep=" "))
}
}
#CREATE DATASET OF MISSING UNICODES
if (NROW(missing_unicode)>0) {
print(paste("Missing Unicode Values in",name,": ",NROW(missing_unicode),sep=" "))
inp_raw$dataset=name
if (exists("missing_unicode_all")) {
missing_unicode_all<-rbind(missing_unicode_all,inp_raw[missing_unicode,])
assign("missing_unicode_all",missing_unicode_all,envir=.GlobalEnv)
}
else {
assign("missing_unicode_all",inp_raw[missing_unicode,],envir=.GlobalEnv)
}
}
}
inp_raw <- read.csv(file=files[i], header=TRUE)
files
files[1]
files <- list.files(pattern="*blocks.csv")
'
################################
This code:
Creates uniblock codes based on polygons
CREATOR: SN
######################################
'
library(splitstackshape)
#TODO: SET THIS TO POINT TO YOUR SPATIAL DATA
#OR SET UP AN ENVIRONMENT VARIABLE "SPATIAL_DATA"
if(Sys.getenv("SPATIAL_DATA") != "") {
setwd(paste(Sys.getenv("SPATIAL_DATA"), sep=""))
} else if(Sys.getenv("USER") == "snutman") {
setwd("/Users/snutman/Documents/CHAGAS_DATA/spatial_surveillence/Spatial_data")
} else if(Sys.getenv("USER") == "USER") {
setwd("PATH_TO_SPATIAL_DATA")
}
TimeStamp <- function(prefix="", suffix="", outmsg=TRUE) {
#generates a unique time stamp for every data generated
t <- format(Sys.time(), "%Y-%m-%d__%H-%M-%S");
s <- as.integer(runif(1, max=1000))
filename <- paste(prefix, t, s, suffix, sep="")
if (outmsg) {
print(filename)
}
return(filename)
}
#Whether you want to output new datasets
Params <- list(
output="yes"
)
#PULL IN ALL DATASETS IN FOLDER -> THIS ASSUMES THAT THE RAW DISTRICT
#DATA IS THE ONLY DATA IN THE FOLDER
files <- list.files(pattern="*blocks.csv")
for (i in 1:length(files)) {
#CLEAN UP NAMES
name=sub("blocks.csv", "", files[i])
name=sub("_puntos.*$","",name,ignore.case=TRUE)
name=sub("puntos.*$","",name,ignore.case=TRUE)
name=sub("_Point.*$","",name,ignore.case=TRUE)
name=sub("Point.*$","",name,ignore.case=TRUE)
name=sub("Point.*$","",name,ignore.case=TRUE)
name=sub("_2.*$","",name,ignore.case=TRUE)
inp_raw <- read.csv(file=files[i], header=TRUE)
inp_raw<-inp_raw[order(inp_raw$polygon, inp_raw$unicode),]
#FIND MISSING UNICODES | ULTIMATELY OUTPUT TO NEW DATASET
missing_unicode=which(inp_raw$unicode==""|is.na(inp_raw$unicode))
#SOCABAYA HAS CENTRO DE SALUD WITH SPECIAL UNICODE; DEALT WITH HERE
#BY MAKING UNICODE IN LINE WITH POLYGON WHICH IS CHANGED BACK AT THE END
if (grepl("socabaya",name,ignore.case=TRUE)) {
inp_raw$unicode<-sub("CS 4 de Octubre","1.25.3.324A",inp_raw$unicode,fixed=TRUE)
#print("CHANGED SOCABAYA")
}
inp<-concat.split(inp_raw,"unicode", ".")
setnames(inp, 7:10, c("prov", "dist", "loc", "viv"))
print(paste(name,"_Raw:", NROW(inp),sep=" "))
#FIND NEW LOCATIONS FROM AFTER EID DATA; MARKED WITH ALPHA CHARACTERS"
addl=which(grepl("[A-Z]",inp$loc,ignore.case=TRUE))
inp_add <- inp[addl,]
print(paste(name,"Add",":",NROW(inp_add),sep=" "))
#PREVIOUS LOCATION BLOCKS
short=which(grepl("[A-Z]",inp$loc,ignore.case=TRUE)==0)
inp_short <- inp[short,]
inp_short$loc <- factor(inp_short$loc)
inp_short <- as.data.frame(inp_short)
inp_short$loc_num <- as.numeric(levels(inp_short$loc))[inp_short$loc]
inp_short$uniblock <- inp_short$loc_num * 10000 + inp_short$polygon
block_by_loc <- aggregate(x = inp_short$polygon, by = list(inp_short$loc_num, inp_short$uniblock), FUN = mean)
#CREATE A UNIQUE SET OF BLOCKS BY LOCALITY
block_by_loc$block <- ave(block_by_loc$Group.2, block_by_loc$Group.1, FUN = seq_along)
setnames(block_by_loc, 2, "uniblock")
blocks <- block_by_loc[,c(2,4)]
inp_short <- merge(inp_short, blocks, by = "uniblock", all = T)
#CHANGING BACK SOCABAYA SPECIAL UNICODE
if (grepl("socabaya",name,ignore.case=TRUE)) {
cs=which(inp_short$unicode=="1.25.3.324A")
inp_short$unicode[cs]<-"CS 4 de Octubre"
inp_short$viv[cs]<-NA
}
# ADDITIONAL LOCALITIES IF THERE ARE ANY (DONE SEPARATELY BECAUSE THE LOCALITIES ARE NOT NUMBERS)
if (NROW(inp_add)>0) {
inp_add$uniblock <- paste(inp_add$loc, inp_add$polygon)
block_by_loc <- aggregate(x = inp_add$polygon, by = list(inp_add$loc, inp_add$uniblock), FUN = mean)
block_by_loc$block <- ave(block_by_loc$Group.2, block_by_loc$Group.1, FUN = seq_along)
setnames(block_by_loc, 2, "uniblock")
blocks <- block_by_loc[,c(2,4)]
inp_add$loc_num<-as.numeric(NA)
inp_add <- merge(inp_add, blocks, by = "uniblock", all = T)
#RE-COMBINE DATASETS
inp_all<-rbind(inp_short,inp_add)
#REMAKE UNIBLOCK TO REFELCT PROV,DISTRICT,LOCALITY AND EXPORT
inp_all$uniblock<-NULL
inp_all$uniblock<-as.factor(paste(inp_all$prov,inp_all$dist,inp_all$loc,inp_all$block,sep="."))
assign(name,inp_all,envir = .GlobalEnv)
if (Params$output!="no") {
write.csv(inp_all,paste("output/",name,"_uniblock.csv",sep=""),row.names=FALSE)
print(paste(name,"_Final:", NROW(inp_all),sep=" "))
}
}
else {
inp_short$uniblock<-NULL
inp_short$uniblock<-as.factor(paste(inp_short$prov,inp_short$dist,inp_short$loc,inp_short$block,sep="."))
assign(name,inp_short,envir = .GlobalEnv)
if (Params$output!="no") {
write.csv(inp_short,paste("output/",name,"_uniblock.csv",sep=""),row.names=FALSE)
print(paste(name,"_Final:", NROW(inp_short),sep=" "))
}
}
#CREATE DATASET OF MISSING UNICODES
if (NROW(missing_unicode)>0) {
print(paste("Missing Unicode Values in",name,": ",NROW(missing_unicode),sep=" "))
inp_raw$dataset=name
if (exists("missing_unicode_all")) {
missing_unicode_all<-rbind(missing_unicode_all,inp_raw[missing_unicode,])
assign("missing_unicode_all",missing_unicode_all,envir=.GlobalEnv)
}
else {
assign("missing_unicode_all",inp_raw[missing_unicode,],envir=.GlobalEnv)
}
}
}
if (exists("missing_unicode_all")) {
write.csv(missing_unicode_all,TimeStamp("output/missing_unicode_",".csv"),row.names=FALSE)
}
setwd('/home/gianfranco/Documentos/proyectos R/pruebas')
sensis<-read.csv("Sensiibilizacion_Participacion.csv")
c2Rociado<-read.csv("ROCIADO_IICICLO_PARTICIPACION.csv")
estrategias<-read.csv("bd_estrategias.csv")
View(sensis)
duplicated(sensis$UNICODE)
puntos_uni_rep_cas <- sensis[which(duplicated(sensis$UNICODE)),1]
aux<-sensis[sensis$UNICODE %in% puntos_uni_rep_cas,]
View(aux)
aux<- aux[order(aux$UNICODE),]
sensis[10644,]>sensis[10653,]
sensis[10644,1]>sensis[10653,1]
which(sensis[10644,1])
which(sensis[10644,])
puntos_uni_rep_cas
sensisLoc34<- sensis[grepl("1.1.34.", sensis$UNICODE),]
View(sensisLoc34)
sensisLoc34<- sensis[grepl("1.1.34.", sensis$UNICODE, fixed = T),]
puntos_uni_rep_cas <- sensisLoc34[which(duplicated(sensisLoc34$UNICODE)),1]
aux<-sensisLoc34[sensisLoc34$UNICODE %in% puntos_uni_rep_cas,]
View(aux)
aux<- aux[order(aux$UNICODE),]
View(aux)
aux2<- sensisLoc34[unique(sensisLoc34$UNICODE),]
View(aux2)
aux2<- aux2[order(aux2$UNICODE),]
View(aux2)
unique(sensisLoc34$UNICODE)
sensisLoc34[5271,1]
sensis[5271,1]
sensis[6306,1]
unique(sensisLoc34$UNICODE, fromLast = TRUE)
unique(sensisLoc34$UNICODE, fromLast = FALSE)
x <- c(3:5, 11:8, 8 + 0:5)
x
(ux <- unique(x))
(u2 <- unique(x, fromLast = TRUE))
stopifnot(identical(sort(ux), sort(u2)))
w<-stopifnot(identical(sort(ux), sort(u2)))
w
sort(ux)
identical(sort(ux))
identical(sort(ux), sort(u2))
(ux <- unique(x))
(u2 <- unique(x, fromLast = TRUE))
identical(sort(ux), sort(u2))
grepl(sensis[2284,1],sensis[2323,1],fixed = TRUE)
identical(sensis[2284,1], sensis[2323,1])
unique(sensisLoc34$UNICODE)
order(unique(sensisLoc34$UNICODE))
z<-unique(sensisLoc34$UNICODE)
z
order(z)
z<-sensisLoc34[unique(sensisLoc34$UNICODE),]
View(z)
order(z)
z<-z[order(z),]
View(z)
rm(list = ls())
#Leer el archivos
sensis<-read.csv("Sensiibilizacion_Participacion.csv")
c2Rociado<-read.csv("ROCIADO_IICICLO_PARTICIPACION.csv")
estrategias<-read.csv("bd_estrategias.csv")
sensisLoc34<- sensis[grepl("1.1.34.", sensis$UNICODE, fixed = T),]
x<-unique(sensisLoc34$UNICODE, incomparables = TRUE)
x<-unique(sensisLoc34$UNICODE)
x
y<-unique(x)
length(x)
length(y)
w<-as.array(y)
w
y<-unique(w)
rm(list = ls())
#Autor: Gian Franco
######################
#Piloto aplicado  la localidad 34(Apurimac)
####################################
setwd('/home/gianfranco/Documentos/proyectos R/pruebas')
#Leer el archivos
sensis<-read.csv("Sensiibilizacion_Participacion.csv")
c2Rociado<-read.csv("ROCIADO_IICICLO_PARTICIPACION.csv")
estrategias<-read.csv("bd_estrategias.csv")
#Selecccionar solo localidad 34
sensisLoc34<- sensis[grepl("1.1.34.", sensis$UNICODE, fixed = T),]
sensisLoc34[which(duplicated(sensisLoc34$UNICODE)),1]
sensisLoc34<- sensisLoc34[unique(sensisLoc34$UNICODE),]
View(sensisLoc34)
sensisLoc34<- sensisLoc34[order(sensisLoc34$UNICODE),]
View(sensisLoc34)
